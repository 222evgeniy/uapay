<?php
/**
 * AdDetailsResponseDataHandlersConfigs
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UAPAY EscrowBox
 *
 * Escrow box from UAPAY
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AdDetailsResponseDataHandlersConfigs Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdDetailsResponseDataHandlersConfigs implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdDetailsResponse_data_handlersConfigs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'payment_type' => 'string',
        'sender_first_name' => 'string',
        'sender_last_name' => 'string',
        'sender_patronymic' => 'string',
        'sender_phone' => 'string',
        'sender_email' => 'string',
        'sender_city_id' => 'string',
        'sender_office_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'payment_type' => null,
        'sender_first_name' => null,
        'sender_last_name' => null,
        'sender_patronymic' => null,
        'sender_phone' => null,
        'sender_email' => null,
        'sender_city_id' => null,
        'sender_office_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'payment_type' => 'paymentType',
        'sender_first_name' => 'senderFirstName',
        'sender_last_name' => 'senderLastName',
        'sender_patronymic' => 'senderPatronymic',
        'sender_phone' => 'senderPhone',
        'sender_email' => 'senderEmail',
        'sender_city_id' => 'senderCityId',
        'sender_office_id' => 'senderOfficeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'payment_type' => 'setPaymentType',
        'sender_first_name' => 'setSenderFirstName',
        'sender_last_name' => 'setSenderLastName',
        'sender_patronymic' => 'setSenderPatronymic',
        'sender_phone' => 'setSenderPhone',
        'sender_email' => 'setSenderEmail',
        'sender_city_id' => 'setSenderCityId',
        'sender_office_id' => 'setSenderOfficeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'payment_type' => 'getPaymentType',
        'sender_first_name' => 'getSenderFirstName',
        'sender_last_name' => 'getSenderLastName',
        'sender_patronymic' => 'getSenderPatronymic',
        'sender_phone' => 'getSenderPhone',
        'sender_email' => 'getSenderEmail',
        'sender_city_id' => 'getSenderCityId',
        'sender_office_id' => 'getSenderOfficeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['sender_first_name'] = isset($data['sender_first_name']) ? $data['sender_first_name'] : null;
        $this->container['sender_last_name'] = isset($data['sender_last_name']) ? $data['sender_last_name'] : null;
        $this->container['sender_patronymic'] = isset($data['sender_patronymic']) ? $data['sender_patronymic'] : null;
        $this->container['sender_phone'] = isset($data['sender_phone']) ? $data['sender_phone'] : null;
        $this->container['sender_email'] = isset($data['sender_email']) ? $data['sender_email'] : null;
        $this->container['sender_city_id'] = isset($data['sender_city_id']) ? $data['sender_city_id'] : null;
        $this->container['sender_office_id'] = isset($data['sender_office_id']) ? $data['sender_office_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets sender_first_name
     *
     * @return string
     */
    public function getSenderFirstName()
    {
        return $this->container['sender_first_name'];
    }

    /**
     * Sets sender_first_name
     *
     * @param string $sender_first_name sender_first_name
     *
     * @return $this
     */
    public function setSenderFirstName($sender_first_name)
    {
        $this->container['sender_first_name'] = $sender_first_name;

        return $this;
    }

    /**
     * Gets sender_last_name
     *
     * @return string
     */
    public function getSenderLastName()
    {
        return $this->container['sender_last_name'];
    }

    /**
     * Sets sender_last_name
     *
     * @param string $sender_last_name sender_last_name
     *
     * @return $this
     */
    public function setSenderLastName($sender_last_name)
    {
        $this->container['sender_last_name'] = $sender_last_name;

        return $this;
    }

    /**
     * Gets sender_patronymic
     *
     * @return string
     */
    public function getSenderPatronymic()
    {
        return $this->container['sender_patronymic'];
    }

    /**
     * Sets sender_patronymic
     *
     * @param string $sender_patronymic sender_patronymic
     *
     * @return $this
     */
    public function setSenderPatronymic($sender_patronymic)
    {
        $this->container['sender_patronymic'] = $sender_patronymic;

        return $this;
    }

    /**
     * Gets sender_phone
     *
     * @return string
     */
    public function getSenderPhone()
    {
        return $this->container['sender_phone'];
    }

    /**
     * Sets sender_phone
     *
     * @param string $sender_phone sender_phone
     *
     * @return $this
     */
    public function setSenderPhone($sender_phone)
    {
        $this->container['sender_phone'] = $sender_phone;

        return $this;
    }

    /**
     * Gets sender_email
     *
     * @return string
     */
    public function getSenderEmail()
    {
        return $this->container['sender_email'];
    }

    /**
     * Sets sender_email
     *
     * @param string $sender_email sender_email
     *
     * @return $this
     */
    public function setSenderEmail($sender_email)
    {
        $this->container['sender_email'] = $sender_email;

        return $this;
    }

    /**
     * Gets sender_city_id
     *
     * @return string
     */
    public function getSenderCityId()
    {
        return $this->container['sender_city_id'];
    }

    /**
     * Sets sender_city_id
     *
     * @param string $sender_city_id sender_city_id
     *
     * @return $this
     */
    public function setSenderCityId($sender_city_id)
    {
        $this->container['sender_city_id'] = $sender_city_id;

        return $this;
    }

    /**
     * Gets sender_office_id
     *
     * @return string
     */
    public function getSenderOfficeId()
    {
        return $this->container['sender_office_id'];
    }

    /**
     * Sets sender_office_id
     *
     * @param string $sender_office_id sender_office_id
     *
     * @return $this
     */
    public function setSenderOfficeId($sender_office_id)
    {
        $this->container['sender_office_id'] = $sender_office_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


